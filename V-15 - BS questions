Allocate book : Given an array ‘arr’ of integer numbers, ‘arr[i]’ represents the number of pages in the ‘i-th’ book.
There are ‘m’ number of students, and the task is to allocate all the books to the students.
Allocate books in such a way that:
1. Each student gets at least one book.
2. Each book should be allocated to only one student.
3. Book allocation should be in a contiguous manner.
You have to allocate the book to ‘m’ students such that the maximum number of pages assigned to a student is minimum.
If the allocation of books is not possible, return -1.

ANSWER:

bool isPossible(vector<int>& arr, int n, int m,int mid){
    int studentcount=1;
    int pagesum=0;

    for(int i=0;i<n;i++){
        if(pagesum + arr[i] <= mid){
            pagesum += arr[i];
        }
        else{
            studentcount++;
            if(studentcount>m || arr[i] > mid ){
                return false;
            }

            pagesum = arr[i];
        }
    }
    
    return true;
}

int findPages(vector<int>& arr, int n, int m) {
    if(m>n){
        return -1;
    }
    int s=0;
    int sum = 0;

    for(int i=0;i<n;i++){
        sum+=arr[i];
    }
    int e=sum;

    int mid = s + ((e-s)/2);
    int ans=-1;

    while(s<=e){
        if(isPossible(arr,n,m,mid)){
            ans=mid;
            e=mid-1;
        }
        else{
            s=mid+1;
        }
        mid=s+((e-s)/2);
    }
    return ans;
}



PAINTER'S PARTITION PROBLEM : 

bool isPossible(vector<int> &boards, int k, int mid)

{

    int  paintCount =1;

    int boardSum = 0;

 

    for(int i = 0; i<boards.size(); i++)

    {

        if(boardSum + boards[i]<=mid)

        {

            boardSum +=boards[i];

        }

        else{

            paintCount++;

            if(paintCount>k || boards[i] > mid)

            {

                return false;

            }

            boardSum = boards[i];

        }

    }

    return true;

}

 

int findLargestMinDistance(vector<int> &boards, int k)

{

    int s= 0;

    int  sum = 0;

     for(int i = 0; i<boards.size(); i++)

     {

         sum +=  boards[i];

     }

     int e = sum;

     int ans = -1;

     int mid = s+ (e-s)/2;

 

     while(s <=e)

     {

         if(isPossible(boards,k,mid))

         {

             ans = mid;

             e = mid -1;

 

         }

         else

         {

             s = mid +1;

         }

         mid = s+(e-s)/2;

     }

     return ans;

}




AGGRESSIVE COWS:

ANSWER : bool IsPossible(vector<int> &stalls, int k,int mid){
    int cowcount = 1;
    int lastpos = stalls[0];

    for(int i=0;i<stalls.size();i++){
        if(stalls[i]-lastpos>=mid){
            cowcount++;
            if(cowcount==k){
                return true;
            }
            lastpos=stalls[i];
        }
    }
    return false;

}

int aggressiveCows(vector<int> &stalls, int k)
{
    sort(stalls.begin(),stalls.end());
    int s=0;

    int maxi=-1;

    for(int i=0; i<stalls.size(); i++){
        maxi = max(maxi , stalls[i]);
    }
    int e=maxi;

    int ans =-1;
    int mid = s +(e-s/2);

    while(s<=e){
        if(IsPossible(stalls,k,mid)){
            ans = mid;
            s=mid+1;
        }
        else{
            e=mid-1;
        }
        mid = s +(e-s/2); 
    }
    return ans;}
