7. Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
Example 1:
Input: x = 123
Output: 321

ANSWER:

class Solution {
public:
    int reverse(int x) {
        int answer=0;
        int a;
        while(x!=0){
            a=x%10;
            
            if((answer > INT_MAX/10) || (answer<INT_MIN /10)){
                return 0;
            }
            answer = (answer*10)+a;
            x=x/10;
         }
        return answer;
    }
};


231.Given an integer n, return true if it is a power of two. Otherwise, return false.
An integer n is a power of two, if there exists an integer x such that n == 2x.
Example 1:
Input: n = 1
Output: true
Explanation: 20 = 1

ANSWER: 

class Solution {
public:
    bool isPowerOfTwo(int n) {
        for(int i=0;i<31;i++){
            int ans =pow(2,i);
            if(ans==n){
                return true;
            }
        }
        return false;
    }
};


QUESTION: 
BASIC CALCULATOR USING SWITCH CASE

// CALCULATOR
#include<iostream>
using namespace std;

int main(){
    int a , b , x;
    char ch;

    cout<<"Enter a and b"<<endl;
    cin>>a>>b;

    cout<<"Enter operator"<<endl;
    cin>>ch;
    int ans;

    switch(ch){
        case '+':
          ans=a+b;
          cout<<ans<<endl;
          break;
        case '-':
          ans=a-b;
          cout<<ans<<endl;
          break;
        case '*':
          ans=a*b;
          cout<<ans<<endl;
          break;
        case '/':
          ans=a/b;
          cout<<ans<<endl;
          break;
        case '%':
          ans=a%b;
          cout<<ans<<endl;
          break;
        default:
          cout<<"Invalid expression"<<endl;

    }
}
